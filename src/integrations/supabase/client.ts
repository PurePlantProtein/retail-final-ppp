// This file is automatically generated. Do not edit it directly.
// Lightweight shim to make existing frontend calls work with local API.
// This replaces supabase client usage with simple fetch wrappers.

type SupabaseAuth = {
	signUp: (opts: { email: string; password: string }) => Promise<any>;
	signInWithPassword: (opts: { email: string; password: string }) => Promise<any>;
	signOut: () => Promise<any>;
	getUser: () => Promise<any>;
	onAuthStateChange: (fn: any) => { data: null };
	updateUser: (obj: any) => Promise<any>;
};

const apiBase = import.meta.env.VITE_API_BASE || '/api';

function setToken(token: string | null) {
	if (token) localStorage.setItem('token', token);
	else localStorage.removeItem('token');
}

function getToken() {
	return localStorage.getItem('token');
}

const auth: SupabaseAuth = {
	async signUp({ email, password }) {
		const res = await fetch(`${apiBase}/auth/signup`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) });
		const data = await res.json();
		if (data.token) setToken(data.token);
		return { data };
	},
	async signInWithPassword({ email, password }) {
		const res = await fetch(`${apiBase}/auth/signin`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) });
		const data = await res.json();
		if (data.token) setToken(data.token);
		return { data };
	},
	async signOut() {
		setToken(null);
		return { data: null };
	},
	async getUser() {
		const token = getToken();
		if (!token) return { data: { user: null } };
		// decode token payload lightly
		try {
			const payload = JSON.parse(atob(token.split('.')[1]));
			return { data: { user: { id: payload.sub, email: payload.email } } };
		} catch (e) {
			return { data: { user: null } };
		}
	},
	onAuthStateChange: (_fn: any) => ({ data: null }),
	async updateUser(obj: any) {
		// no-op shim; frontend expects this
		return { data: null };
	}
};

async function from(table: string) {
	const token = getToken();
	const res = await fetch(`${apiBase}/${table}`, { headers: { Authorization: token ? `Bearer ${token}` : '' } });
	const data = await res.json();
	return { data };
}

export const supabase = {
	auth,
	from: (table: string) => ({ select: async () => await from(table) }),
	functions: {
		invoke: async (fnName: string, opts: any) => {
			// Map common function names to API endpoints if needed
			const res = await fetch(`${apiBase}/functions/${fnName}`, { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: getToken() ? `Bearer ${getToken()}` : '' }, body: JSON.stringify(opts) });
			return { data: await res.json() };
		}
	},
	storage: {
		from: (_: string) => ({ getPublicUrl: (_path: string) => ({ data: { publicUrl: '' } }) })
	}
} as any;