
import { supabase } from '@/integrations/supabase/client';
import { MarketingMaterial } from '@/types/product';

// Function to get all marketing materials
export const getMarketingMaterials = async (): Promise<MarketingMaterial[]> => {
  try {
    // Use "as any" to bypass the TypeScript error temporarily
    // This is needed because the types weren't autogenerated yet
    const { data, error } = await (supabase as any)
      .from('marketing_materials')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Error fetching marketing materials:", error);
    throw error;
  }
};

// Function to get marketing materials by category
export const getMarketingMaterialsByCategory = async (category: string): Promise<MarketingMaterial[]> => {
  try {
    // Use "as any" to bypass the TypeScript error temporarily
    const { data, error } = await (supabase as any)
      .from('marketing_materials')
      .select('*')
      .eq('category', category)
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error(`Error fetching marketing materials for category ${category}:`, error);
    throw error;
  }
};

// Function to upload a new marketing material
export const uploadMarketingMaterial = async (
  file: File,
  materialData: Omit<MarketingMaterial, 'id' | 'file_url' | 'created_at' | 'updated_at'>
): Promise<MarketingMaterial> => {
  try {
    // Generate a unique filename
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;
    const filePath = `marketing_materials/${fileName}`;
    
    // Upload file to storage
    const { error: uploadError } = await supabase.storage
      .from('marketing')
      .upload(filePath, file);
      
    if (uploadError) throw uploadError;
    
    // Get public URL
    const { data: urlData } = supabase.storage.from('marketing').getPublicUrl(filePath);
    const fileUrl = urlData.publicUrl;
    
    // Insert record into database
    // Use "as any" to bypass the TypeScript error temporarily
    const { data, error } = await (supabase as any)
      .from('marketing_materials')
      .insert([{
        title: materialData.title,
        description: materialData.description,
        file_url: fileUrl,
        file_type: file.type,
        category: materialData.category || 'General'
      }])
      .select('*')
      .single();
      
    if (error) throw error;
    
    return data;
  } catch (error) {
    console.error("Error uploading marketing material:", error);
    throw error;
  }
};

// Function to delete a marketing material
export const deleteMarketingMaterial = async (id: string): Promise<void> => {
  try {
    // Get the file URL first to extract the path for storage deletion
    // Use "as any" to bypass the TypeScript error temporarily
    const { data, error: fetchError } = await (supabase as any)
      .from('marketing_materials')
      .select('file_url')
      .eq('id', id)
      .single();
      
    if (fetchError) throw fetchError;
    
    // Delete from database
    // Use "as any" to bypass the TypeScript error temporarily
    const { error } = await (supabase as any)
      .from('marketing_materials')
      .delete()
      .eq('id', id);
      
    if (error) throw error;
    
    // If we have a file URL, try to delete from storage
    if (data && data.file_url) {
      // Extract the filename from the URL
      const fileUrl = data.file_url;
      const filePath = fileUrl.split('/').pop();
      
      if (filePath) {
        const storagePath = `marketing_materials/${filePath}`;
        console.log("Deleting file from storage:", storagePath);
        
        await supabase.storage
          .from('marketing')
          .remove([storagePath]);
      }
    }
  } catch (error) {
    console.error(`Error deleting marketing material with ID ${id}:`, error);
    throw error;
  }
};
